<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastro de Produtos Ploomes</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>

<body>
    <header>
        <span>Carregar Arquivo</span>
        <form id="uploadForm" action="/upload" method="post" enctype="multipart/form-data">
            <input title="Seletor de Arquivo" type="file" name="file" accept=".xlsx" required>
            <button type="submit">Importar</button>
        </form>
        <br>
        <a id="downloadLink" href="/download">Baixar Modelo de Arquivo</a>
        <div id="result"></div>
    </header>
    <main>
        <div id="retorno">
            <table>
                <tHead>
                    <th>
                    <td></td>
                    </th>
                </tHead>
                <tbody>
                    <tr>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div id="updates">
            <h3>Atualizações:</h3>
            <ul id="update-list"></ul>
        </div>
        <div class="loader hidden" id="loader"></div>
    </main>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const update = document.getElementById('updates');
        const updateList = document.getElementById('update-list');
        const loader = document.querySelector(".loader");
        const comments = ['Iniciando processamento...',`Linha`,`Processando`,"Processo completo. Atualizando arquivo carregado ...",'Criando novo produto Macro','Criando novo produto Micro','Atualizando produto Macro','Atualizando produto Micro','Processo iniciado...','Construindo Arquivo...', 'Obtendo Grupos e Produtos cadastrados no Ploomes...','Aplicando formulas e seletores...','Salvando arquivo...'];
        const check = [`Vinculo bem sucedido`, `Produto Macro criado`, `Produto Micro criado`, `Produto Macro atualizado`, `Produto Micro Atualizado`, "Arquivo salvo com sucesso.", 'Fim','Arquivo pronto, enviando download...'];
        const times = [`Erro ao criar vinculo -`, `Erro ao tratar linhas Vazias`, `Erro ao processar a linha`, `Erro no processamento:`];
        const exclamations = [`Falha ao verificar Vinculo:`, `Falha ao criar produto Macro:`, `Falha ao operar produto Macro:`, `Falha ao criar produto Macro:`, `Falha ao atualizar produto Micro:`, `Falha ao criar produto Micro:`, `Falha ao operar produto Macro:`];
        const download = ['Download liberado'];

        socket.on('update', (message) => {
            const li = document.createElement('li');
            const icon = document.createElement('i');

            if (times.some(error => message.includes(error))) {
                icon.className = 'fas fa-times-circle'; // Ícone negativo
            } else if (exclamations.some(alert => message.includes(alert))) {
                icon.className = 'fas fa-exclamation-circle'; // Ícone crítico
            } else if (check.some(success => message.includes(success))) {
                icon.className = 'fas fa-check-circle'; // Ícone positivo
            } else if (comments.some(info => message.includes(info))) {
                icon.className = 'fas fa-comment-dots'; // Ícone informativo
            } else if (download.some(down => message.includes(down))) {
                icon.className = 'fa-solid fa-download'; //Icone download
            }

            li.appendChild(icon);
            li.appendChild(document.createTextNode(message)); // Adiciona o texto após o ícone
            updateList.appendChild(li);
            update.scrollTop = update.scrollHeight;
        });

        socket.on('erase', () => {
            updateList.innerHTML = '';
        });

        socket.on('startLoader', () => {
            loader.classList.remove("hidden");
        });

        socket.on('stopLoader', () => {
            loader.classList.add("hidden");
        });

        document.getElementById('uploadForm').onsubmit = async function (event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            await fetch('/upload', {
                method: 'POST',
                body: formData
            });
        };
    </script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script> -->
</body>

</html>